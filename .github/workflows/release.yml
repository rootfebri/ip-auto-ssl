name: Release Binaries

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Rust environment
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      # Cache Cargo dependencies for faster builds
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Build for Linux
      - name: Build for Linux
        run: cargo build --release
        env:
          CARGO_TARGET_DIR: target/linux

      # Build for Windows
      - name: Build for Windows
        runs-on: windows-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v3

          - name: Set up Rust
            uses: actions-rs/toolchain@v1
            with:
              toolchain: stable

          - name: Cache Cargo registry
            uses: actions/cache@v3
            with:
              path: |
                ~/.cargo/registry
                ~/.cargo/git
              key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
              restore-keys: |
                windows-cargo-

          - name: Build for Windows
            run: cargo build --release
            env:
              CARGO_TARGET_DIR: target/windows

      # Create a GitHub release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      # Upload Linux binary to release
      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/linux/release/ip-autossl
          asset_name: ip-autossl-linux
          asset_content_type: application/octet-stream

      # Upload Windows binary to release
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/windows/release/ip-autossl.exe
          asset_name: ip-autossl-windows.exe
          asset_content_type: application/octet-stream
