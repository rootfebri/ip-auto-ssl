name: Release on Main Push

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # Add Windows target
      - name: Add Windows Target
        run: rustup target add x86_64-pc-windows-gnu

      # Install MinGW toolchain for Windows target
      - name: Install MinGW
        run: sudo apt-get install -y gcc-mingw-w64

      # Build the Windows binary
      - name: Build Windows Binary
        run: cargo build --release --target=x86_64-pc-windows-gnu

      # Build the Linux binary
      - name: Build Linux Binary
        run: cargo build --release --target=x86_64-unknown-linux-gnu

      # Create the release tag
      - name: Create Release Tag
        id: create_tag
        run: |
          git fetch
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          IFS='.' read -r major minor patch <<< "${latest_tag#v}"
          patch=$((patch + 1))
          new_tag="v$major.$minor.$patch"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo $new_tag


      # Push the tag
      - name: Push Release Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}


      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false

      # Upload Windows binary to release
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/x86_64-pc-windows-gnu/release/ip-auto-ssl.exe
          asset_name: ip-auto-ssl-windows.exe
          asset_content_type: application/octet-stream

      # Upload Linux binary to release
      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-gnu/release/ip-auto-ssl
          asset_name: ip-auto-ssl-linux
          asset_content_type: application/octet-stream
